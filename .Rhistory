setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=20 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count <= 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(200, 0.005, "(UMI count <= 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=20 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(250, 0.9, "(UMI count <= 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(200, 0.005, "(UMI count <= 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=20 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count <= 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(250, 0.005, "(UMI count <= 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=20 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count <= 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(270, 0.005, "(UMI count <= 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=20 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count < 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(260, 0.005, "(UMI count < 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=50 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count < 20 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(260, 0.005, "(UMI count < 20 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=50 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count < 50 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(300, 0.006, "(UMI count < 50 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
if (dir.exists("./analysis/cache/")==FALSE){
dir.create("./analysis/cache/")
}
barcode_dist_plot <- function(mtx){
mtx <- "Expression"
filename <- paste0("./analysis/cache/", mtx, "_matrix_barcodes_summary.csv")
barcode_means <- read.csv(filename, header = TRUE)
barcode_means <- dplyr::filter(barcode_means, barcode_non_zero_count >=50 & barcode_non_zero_count <=2000)
# UMI counts for all cells  (not cumulative)
barcode_dist <- barcode_means[,"barcode_non_zero_count"]
names(barcode_dist) <- 1:length(barcode_dist)
# UMI counts for all cells (cdf)
filename <- paste0("./analysis/cache/1_", deparse(substitute(mtx)), "_barcode_dist_cdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
plot(ecdf(barcode_dist), main="CDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="CDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1200, 0.5, "QC: UMI count >= 850")
text(200, 0.9, "(UMI count < 50 excluded)")
dev.off()
# UMI counts for all cells (pdf)
filename <- paste0("./analysis/cache/2_", deparse(substitute(mtx)), "_barcode_dist_pdf.tif")
tiff(file=filename, width=8, height=5, units="in", res=600)
PDF <- hist(barcode_dist, freq=F, breaks=150, main="PDF: UMI counts in each barcode (cell)", xlab="UMI counts in each barcode (cell)", ylab="PDF")
abline(v=850, col="red", lwd=2, lty=2)
text(1100, 0.003, "UMI count >= 850")
text(290, 0.006, "(UMI count < 50 excluded)")
dev.off()
}
barcode_dist_plot(Expression)
setwd("~/rotation2/")
# Mitochondrial genes
# pull a full list of corresponding Ensembl gene IDs and symbols
#BiocManager::install("biomaRt")
library(biomaRt)
hsapiens_genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
mart = useMart("ensembl", dataset = "hsapiens_gene_ensembl"))
write.table(hsapiens_genes, file="../Morris_2021/hsapiens_genes.csv", sep=",", row.names = FALSE)
rm(hsapiens_genes)
# trim features
library(tidyr)
gene_names <- read.table("../Morris_2021/GSM5225857_cDNA.features.txt")
gene_names <- separate(gene_names, "V1", into=c("gene","version"), sep="[.]")
gene_names <- gene_names[,"gene"]
writeLines(gene_names, "../Morris_2021/cDNA_test.txt")
rm(gene_names)
# gene id to symbol conversion
library(expss)
library(dplyr)
feature <- read.table("../Morris_2021/cDNA_test.txt")
colnames(feature) <- c("id")
ref <- read.csv("../Morris_2021/hsapiens_genes.csv", na.string="")
colnames(ref) <- c("id","symbol")
ref <- mutate(ref, dup=duplicated(ref[,"id"]))
ref <- filter(ref, dup=="FALSE")
ref <- ref[,1:2]
feature <- add_columns(feature, ref, by=c("id"))
feature$gene <- ifelse(is.na(feature$symbol), feature$id, feature$symbol)
writeLines(feature$gene, "../Morris_2021/cDNA_test_feature.txt")
rm(feature,ref)
# correct for MT psudogenes
gene_card <- read.csv("../Morris_2021/GeneCards-SearchResults.csv")[,1:2] # searched "Mitochondrially Encoded" on Gene Cards and downloaded all genes
colnames(gene_card) <- c("symbol","description")
gene_card <- filter(gene_card, grepl('Mitochondrially Encoded', description) | grepl('MT-', description) | grepl('MT-', symbol))
feature <- read.csv("../Morris_2021/cDNA_test_feature.txt",header = FALSE)
colnames(feature) <- c("symbol")
feature <- add_columns(feature, gene_card, by="symbol")
feature <- mutate(feature, symbol2=(ifelse(!is.na(feature$description), paste0("MT-",feature$symbol), feature$symbol)))
feature$symbol2 <- gsub('MT-MT-','MT-',feature$symbol2)
writeLines(feature$symbol2, "../Morris_2021/cDNA_test_feature_corrected.txt")
rm(feature,gene_card)
library(Seurat)
Expression <- Seurat::ReadMtx(mtx = "../Morris_2021/GSM5225857_cDNA.mtx",
features = "../Morris_2021/cDNA_test_feature_corrected.txt",
cells = "../Morris_2021/GSM5225857_cDNA.barcodes.txt",
cell.column=1,
feature.column=1,
mtx.transpose=T)
Expression <- Seurat::CreateSeuratObject(counts = Expression, project = "STING-seq")
Expression[["percent.mt"]] <- Seurat::PercentageFeatureSet(Expression, pattern = "^MT-")
# plot before QC
filename <- "./analysis/cache/5_violin_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::VlnPlot(Expression, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()
filename <- "./analysis/cache/6_percent_mt_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "percent.mt")
dev.off()
filename <- "./analysis/cache/7_nFeature_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
dev.off()
Expression <- subset(Expression, subset = nFeature_RNA >= 850 & percent.mt < 20)
median_genes_per_cell <- median(Expression@meta.data$nFeature_RNA)
dim(Expression)
median_genes_per_cell
setwd("~/rotation2/")
# Mitochondrial genes
# pull a full list of corresponding Ensembl gene IDs and symbols
#BiocManager::install("biomaRt")
library(biomaRt)
hsapiens_genes <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
mart = useMart("ensembl", dataset = "hsapiens_gene_ensembl"))
write.table(hsapiens_genes, file="../Morris_2021/hsapiens_genes.csv", sep=",", row.names = FALSE)
rm(hsapiens_genes)
# trim features
library(tidyr)
gene_names <- read.table("../Morris_2021/GSM5225857_cDNA.features.txt")
gene_names <- separate(gene_names, "V1", into=c("gene","version"), sep="[.]")
gene_names <- gene_names[,"gene"]
writeLines(gene_names, "../Morris_2021/cDNA_test.txt")
rm(gene_names)
# gene id to symbol conversion
library(expss)
library(dplyr)
feature <- read.table("../Morris_2021/cDNA_test.txt")
colnames(feature) <- c("id")
ref <- read.csv("../Morris_2021/hsapiens_genes.csv", na.string="")
colnames(ref) <- c("id","symbol")
ref <- mutate(ref, dup=duplicated(ref[,"id"]))
ref <- filter(ref, dup=="FALSE")
ref <- ref[,1:2]
feature <- add_columns(feature, ref, by=c("id"))
feature$gene <- ifelse(is.na(feature$symbol), feature$id, feature$symbol)
writeLines(feature$gene, "../Morris_2021/cDNA_test_feature.txt")
rm(feature,ref)
# correct for MT psudogenes
gene_card <- read.csv("../Morris_2021/GeneCards-SearchResults.csv")[,1:2] # searched "Mitochondrially Encoded" on Gene Cards and downloaded all genes
colnames(gene_card) <- c("symbol","description")
gene_card <- filter(gene_card, grepl('Mitochondrially Encoded', description) | grepl('MT-', description) | grepl('MT-', symbol))
feature <- read.csv("../Morris_2021/cDNA_test_feature.txt",header = FALSE)
colnames(feature) <- c("symbol")
feature <- add_columns(feature, gene_card, by="symbol")
feature <- mutate(feature, symbol2=(ifelse(!is.na(feature$description), paste0("MT-",feature$symbol), feature$symbol)))
feature$symbol2 <- gsub('MT-MT-','MT-',feature$symbol2)
writeLines(feature$symbol2, "../Morris_2021/cDNA_test_feature_corrected.txt")
rm(feature,gene_card)
library(Seurat)
Expression <- Seurat::ReadMtx(mtx = "../Morris_2021/GSM5225857_cDNA.mtx",
features = "../Morris_2021/cDNA_test_feature_corrected.txt",
cells = "../Morris_2021/GSM5225857_cDNA.barcodes.txt",
cell.column=1,
feature.column=1,
mtx.transpose=T)
Expression <- Seurat::CreateSeuratObject(counts = Expression, project = "STING-seq")
Expression[["percent.mt"]] <- Seurat::PercentageFeatureSet(Expression, pattern = "^MT-")
# plot before QC
filename <- "./analysis/cache/5_violin_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::VlnPlot(Expression, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()
filename <- "./analysis/cache/6_percent_mt_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "percent.mt")
dev.off()
filename <- "./analysis/cache/7_nFeature_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=600)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
dev.off()
Expression <- subset(Expression, subset = nFeature_RNA >= 850 & percent.mt < 20)
median_genes_per_cell <- median(Expression@meta.data$nFeature_RNA)
dim(Expression)
median_genes_per_cell
library(Seurat)
Expression <- Seurat::ReadMtx(mtx = "../Morris_2021/GSM5225857_cDNA.mtx",
features = "../Morris_2021/cDNA_test_feature_corrected.txt",
cells = "../Morris_2021/GSM5225857_cDNA.barcodes.txt",
cell.column=1,
feature.column=1,
mtx.transpose=T)
Expression <- Seurat::CreateSeuratObject(counts = Expression, project = "STING-seq")
Expression[["percent.mt"]] <- Seurat::PercentageFeatureSet(Expression, pattern = "^MT-")
# plot before QC
filename <- "./analysis/cache/5_violin_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::VlnPlot(Expression, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()
filename <- "./analysis/cache/6_percent_mt_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "percent.mt")
dev.off()
filename <- "./analysis/cache/7_nFeature_before_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
dev.off()
Expression <- subset(Expression, subset = nFeature_RNA >= 850 & percent.mt < 20)
median_genes_per_cell <- median(Expression@meta.data$nFeature_RNA)
dim(Expression)
median_genes_per_cell
# HTO (filter by UMI and demuxed droplets/singlets/multiplets)
library(Seurat)
Hashtag <- Seurat::ReadMtx(mtx = "../Morris_2021/GSM5225859_HTO.mtx",
features = "../Morris_2021/GSM5225859_HTO.features.txt",
cells = "../Morris_2021/GSM5225859_HTO.barcodes.txt",
cell.column=1,
feature.column=1,
mtx.transpose=T)
Hashtag <- Seurat::CreateSeuratObject(counts = Hashtag, project = "STING-seq")
Hashtag <- subset(Hashtag, subset = nFeature_RNA >= 1 & nCount_RNA < 2500)
Hashtag <- subset(x = Hashtag, cells = colnames(Hashtag)[(colnames(Hashtag) %in% c(colnames(Expression)))]) # retain only cells in Expression
dim(Hashtag)
Hashtag <- Seurat::NormalizeData(Hashtag, normalization.method = "CLR", scale.factor = 10000, margin = 2) # CLR across cells
Hashtag <- Seurat::HTODemux(Hashtag, assay = "RNA", positive.quantile = 0.91) # find singlets (I don't know how to adjust parameters for this)
Hashtag <- subset(x = Hashtag, RNA_classification.global == "Singlet")
dim(Hashtag)
library(Seurat)
gRNA <- Seurat::ReadMtx(mtx = "../Morris_2021/GSM5225858_GDO.mtx",
features = "../Morris_2021/GSM5225858_GDO.features.txt",
cells = "../Morris_2021/GSM5225858_GDO.barcodes.txt",
cell.column=1,
feature.column=1,
mtx.transpose=T)
gRNA <- Seurat::CreateSeuratObject(counts = gRNA, project = "STING-seq")
gRNA <- subset(x = gRNA, cells = colnames(gRNA)[(colnames(gRNA) %in% c(colnames(Hashtag)))]) # retain only cells in Hashtag
gRNA <- subset(gRNA, subset = nCount_RNA >= 5 & nCount_RNA <= 15000)
dim(gRNA)
Expression <- subset(x = Expression, cells = colnames(Expression)[(colnames(Expression) %in% c(colnames(gRNA)))]) # retain only cells in gRNA
dim(Expression)
Hashtag <- subset(x = Hashtag, cells = colnames(Hashtag)[(colnames(Hashtag) %in% c(colnames(gRNA)))]) # retain only cells in gRNA
dim(Hashtag)
dim(gRNA)
filename <- "./analysis/cache/8_violin_after_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::VlnPlot(Expression, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()
filename <- "./analysis/cache/9_percent_mt_after_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "percent.mt")
dev.off()
filename <- "./analysis/cache/10_nFeature_after_QC.tif"
tiff(file=filename, width=8, height=5, units="in", res=1200)
Seurat::FeatureScatter(Expression, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
dev.off()
dir.create("../Morris_2021/filter", showWarnings = F)
saveRDS(Expression, "../Morris_2021/filter/Expression.rds")
saveRDS(Hashtag, "../Morris_2021/filter/Hashtag.rds")
saveRDS(gRNA, "../Morris_2021/filter/gRNAg.rds")
writeLines(gRNA@assays[["RNA"]]@counts@Dimnames[[2]], "../Morris_2021/QC_by_hang.txt")
rm(list = ls())
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
View(QC_by_hang)
View(QC_by_author)
QC_compare <- add_columns(QC_by_author, QC_by_hang)
View(QC_compare)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by=V1)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="V1")
View(QC_compare)
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
colnames(QC_by_author) <- c("retained_barcode")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
colnames(QC_by_hang) <- c("retained_barcode")
View(QC_by_author)
View(QC_by_hang)
QC_by_hang <- mutate(QC_by_hang, dup=duplicated(QC_by_hang[,"barcode"]))
View(QC_compare)
QC_by_hang <- mutate(QC_by_hang, dup=duplicated(QC_by_hang[,"retained_barcode"]))
View(QC_by_hang)
QC_by_hang <- mutate(QC_by_hang, dup=QC_by_hang$retained_barcode)
View(QC_by_hang)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="retained_barcode")
View(QC_compare)
sum(is.na(QC_compare$dup))
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
colnames(QC_by_author) <- c("retained_barcode")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
colnames(QC_by_hang) <- c("retained_barcode")
QC_by_hang <- mutate(QC_by_hang, check=QC_by_hang$retained_barcode)
library(expss)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="retained_barcode")
sum(is.na(QC_compare$check))
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
colnames(QC_by_author) <- c("retained_barcode")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
colnames(QC_by_hang) <- c("retained_barcode")
QC_by_hang <- mutate(QC_by_hang, check=QC_by_hang$retained_barcode)
library(expss)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="retained_barcode")
print(paste0("There are ", sum(is.na(QC_compare$check)), " cells filtered out comparing with authors' list.))
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
colnames(QC_by_author) <- c("retained_barcode")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
colnames(QC_by_hang) <- c("retained_barcode")
QC_by_hang <- mutate(QC_by_hang, check=QC_by_hang$retained_barcode)
library(expss)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="retained_barcode")
print(paste0("There are ", sum(is.na(QC_compare$check)), " cells filtered out comparing with authors' list."))
setwd("~/rotation2/")
QC_by_author <- read.table("../Morris_2021/QC_by_author.txt")
colnames(QC_by_author) <- c("retained_barcode")
QC_by_hang <- read.table("../Morris_2021/QC_by_hang.txt")
colnames(QC_by_hang) <- c("retained_barcode")
QC_by_hang <- mutate(QC_by_hang, check=QC_by_hang$retained_barcode)
library(expss)
QC_compare <- add_columns(QC_by_author, QC_by_hang, by="retained_barcode")
print(paste0("There are ", sum(is.na(QC_compare$check)), " cells filtered out in comparison to authors' list."))
